import os
import logging
import tempfile
import subprocess
import telebot
from telebot.types import Message
import openai

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.environ.get('TELEGRAM_TOKEN')
OPENAI_API_KEY = os.environ.get('OPENAI_API_KEY')

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
bot = telebot.TeleBot(TELEGRAM_TOKEN)

class PsychologistBot:
    def __init__(self):
        pass

    def convert_ogg_to_wav(self, ogg_path: str):
        try:
            wav_path = ogg_path.replace('.ogg', '.wav')
            result = subprocess.run([
                'ffmpeg', '-i', ogg_path, wav_path, '-y'
            ], capture_output=True, timeout=30)
            return wav_path if result.returncode == 0 else None
        except Exception as e:
            logger.error(f"Conversion error: {e}")
            return None

    def speech_to_text(self, wav_path: str):
        try:
            import speech_recognition as sr
            recognizer = sr.Recognizer()
            with sr.AudioFile(wav_path) as source:
                audio = recognizer.record(source)
                return recognizer.recognize_google(audio, language='ru-RU')
        except Exception as e:
            logger.error(f"Speech recognition error: {e}")
            return ""

    def generate_psychologist_response(self, user_message: str):
        try:
            client = openai.OpenAI(api_key=OPENAI_API_KEY)
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥. –û—Ç–≤–µ—á–∞–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ."},
                    {"role": "user", "content": user_message}
                ],
                max_tokens=400,
                temperature=0.7
            )
            return response.choices[0].message.content.strip()
        except Exception as e:
            logger.error(f"OpenAI error: {e}")
            return "–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –Ø –≥–æ—Ç–æ–≤ –≤–∞—Å –≤—ã—Å–ª—É—à–∞—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å."

psychologist = PsychologistBot()

@bot.message_handler(commands=['start'])
def start_handler(message: Message):
    welcome_text = """
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–±–∏–Ω–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–º–æ—â–∏!

–Ø - –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥. –í—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è üé§
‚Ä¢ –ü–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É

–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç...
    """
    bot.reply_to(message, welcome_text)

@bot.message_handler(content_types=['voice'])
def voice_handler(message: Message):
    try:
        bot.reply_to(message, "üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        
        file_info = bot.get_file(message.voice.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        
        with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as temp_ogg:
            temp_ogg.write(downloaded_file)
            ogg_path = temp_ogg.name

        wav_path = psychologist.convert_ogg_to_wav(ogg_path)
        
        if wav_path:
            text = psychologist.speech_to_text(wav_path)
            
            os.unlink(ogg_path)
            os.unlink(wav_path)
            
            if text and len(text.strip()) > 5:
                bot.reply_to(message, f"üé§ –Ø —É—Å–ª—ã—à–∞–ª: _{text}_", parse_mode='Markdown')
                response = psychologist.generate_psychologist_response(text)
                bot.reply_to(message, response)
            else:
                bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º.")
        else:
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ.")

    except Exception as e:
        logger.error(f"Voice error: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞. –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º.")

@bot.message_handler(content_types=['text'])
def text_handler(message: Message):
    user_text = message.text
    
    crisis_keywords = ['—Å—É–∏—Ü–∏–¥', '—Å–∞–º–æ—É–±–∏–π—Å—Ç–≤–æ', '—É–º—Ä—É', '–ø–æ–∫–æ–Ω—á–∏—Ç—å']
    if any(keyword in user_text.lower() for keyword in crisis_keywords):
        crisis_response = """
üö® –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–º–æ—â—å—é:
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–≤–µ—Ä–∏—è: 8-800-2000-122
‚Ä¢ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å: 112
"""
        bot.reply_to(message, crisis_response)
        return
    
    response = psychologist.generate_psychologist_response(user_text)
    bot.reply_to(message, response)

if __name__ == '__main__':
    logger.info("Starting bot...")
    bot.infinity_polling()
