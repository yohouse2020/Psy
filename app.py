import os
import logging
import tempfile
import asyncio
from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
import openai
import subprocess

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.environ.get('TELEGRAM_TOKEN')
OPENAI_API_KEY = os.environ.get('OPENAI_API_KEY')

class PsychologistBot:
    def __init__(self):
        pass
        
    def start(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = """
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–±–∏–Ω–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–º–æ—â–∏!

–Ø - –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥, –≥–æ—Ç–æ–≤—ã–π –≤—ã—Å–ª—É—à–∞—Ç—å –∏ –ø–æ–º–æ—á—å. –í—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è üé§
‚Ä¢ –ü–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É

–Ø —Å–æ–±–ª—é–¥–∞—é –ø–æ–ª–Ω—É—é –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ —ç—Ç–∏–∫—É –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏.

–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç...
        """
        update.message.reply_text(welcome_text)

    def handle_voice(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            update.message.reply_text("üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
            
            voice = update.message.voice
            voice_file = voice.get_file()
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as temp_ogg:
                voice_file.download_to_drive(temp_ogg.name)
                ogg_path = temp_ogg.name

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV
            wav_path = self.convert_ogg_to_wav(ogg_path)
            
            if wav_path:
                # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
                text = self.speech_to_text(wav_path)
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                os.unlink(ogg_path)
                os.unlink(wav_path)
                
                if text and len(text.strip()) > 5:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ –ø—É—Å—Ç–æ–π
                    update.message.reply_text(f"üé§ –Ø —É—Å–ª—ã—à–∞–ª: _{text}_", parse_mode='Markdown')
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞
                    response = self.generate_psychologist_response(text)
                    update.message.reply_text(response)
                    
                else:
                    update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º.")
            else:
                update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ.")
                if os.path.exists(ogg_path):
                    os.unlink(ogg_path)

        except Exception as e:
            logger.error(f"Error processing voice: {e}")
            update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º.")

    def convert_ogg_to_wav(self, ogg_path: str) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è OGG –≤ WAV –∏—Å–ø–æ–ª—å–∑—É—è ffmpeg"""
        try:
            wav_path = ogg_path.replace('.ogg', '.wav')
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º subprocess –¥–ª—è –≤—ã–∑–æ–≤–∞ ffmpeg
            result = subprocess.run([
                'ffmpeg', '-i', ogg_path, '-acodec', 'pcm_s16le', 
                '-ac', '1', '-ar', '16000', wav_path, '-y'
            ], capture_output=True, text=True, timeout=30)
            
            if result.returncode == 0 and os.path.exists(wav_path):
                return wav_path
            else:
                logger.error(f"FFmpeg error: {result.stderr}")
                return None
                
        except subprocess.TimeoutExpired:
            logger.error("FFmpeg timeout")
            return None
        except Exception as e:
            logger.error(f"Conversion error: {e}")
            return None

    def speech_to_text(self, wav_path: str) -> str:
        """–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –∏—Å–ø–æ–ª—å–∑—É—è Google Speech Recognition"""
        try:
            import speech_recognition as sr
            
            recognizer = sr.Recognizer()
            
            with sr.AudioFile(wav_path) as source:
                # Adjust for ambient noise and record
                recognizer.adjust_for_ambient_noise(source, duration=0.5)
                audio_data = recognizer.record(source)
                
                # Recognize using Google Speech Recognition
                text = recognizer.recognize_google(audio_data, language='ru-RU')
                return text
                
        except sr.UnknownValueError:
            logger.error("Google Speech Recognition could not understand audio")
            return ""
        except sr.RequestError as e:
            logger.error(f"Could not request results from Google Speech Recognition service; {e}")
            return ""
        except Exception as e:
            logger.error(f"Speech recognition error: {e}")
            return ""

    def handle_text(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_text = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏–∑–∏—Å–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏
        if self.check_crisis_situation(user_text):
            update.message.reply_text(self.get_crisis_response())
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞
        response = self.generate_psychologist_response(user_text)
        update.message.reply_text(response)

    def generate_psychologist_response(self, user_message: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∞"""
        try:
            client = openai.OpenAI(api_key=OPENAI_API_KEY)
            
            prompt = f"""
–¢—ã - –¥–∏–ø–ª–æ–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥ —Å 15-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É.

–ü–∞—Ü–∏–µ–Ω—Ç: {user_message}

–¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å:
1. –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –∏ —ç—Ç–∏—á–Ω—ã–º
2. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º –∏ —ç–º–ø–∞—Ç–∏—á–Ω—ã–º  
3. –û—Å–Ω–æ–≤–∞–Ω–Ω—ã–º –Ω–∞ –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏
4. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º
5. –í —Ñ–æ—Ä–º–∞—Ç–µ —Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞

–ù–µ –¥–∞–≤–∞–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∏–∞–≥–Ω–æ–∑–æ–≤ –∏ –Ω–µ –∑–∞–º–µ–Ω—è–π –æ—á–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é. –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–º —Å–ª—É—à–∞–Ω–∏–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–µ.

–û—Ç–≤–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞:
            """
            
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "–¢—ã - –æ–ø—ã—Ç–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥, –æ–∫–∞–∑—ã–≤–∞—é—â–∏–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=500,
                temperature=0.7
            )
            
            return response.choices[0].message.content.strip()
            
        except Exception as e:
            logger.error(f"OpenAI error: {e}")
            return "–ë–ª–∞–≥–æ–¥–∞—Ä—é –≤–∞—Å –∑–∞ –¥–æ–≤–µ—Ä–∏–µ. –Ø –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –≤–∞—Å –≤—ã—Å–ª—É—à–∞–ª –∏ —Ö–æ—á—É –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞ –ø–æ–º–æ—â—å—é - —ç—Ç–æ –≤–∞–∂–Ω—ã–π —à–∞–≥. –î–∞–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ –ø–æ–¥—É–º–∞–µ–º, –∫–∞–∫ –º—ã –º–æ–∂–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å —Å —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–µ–π."

    def check_crisis_situation(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫—Ä–∏–∑–∏—Å–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏"""
        crisis_keywords = ['—Å—É–∏—Ü–∏–¥', '—Å–∞–º–æ—É–±–∏–π—Å—Ç–≤–æ', '—É–º—Ä—É', '–ø–æ–∫–æ–Ω—á–∏—Ç—å', '–∫—Ä–∏–∑–∏—Å', '—Ö–æ—á—É —É–º–µ—Ä–µ—Ç—å', '–Ω–∞–ª–æ–∂—É –Ω–∞ —Å–µ–±—è —Ä—É–∫–∏']
        text_lower = text.lower()
        return any(keyword in text_lower for keyword in crisis_keywords)

    def get_crisis_response(self) -> str:
        """–û—Ç–≤–µ—Ç –¥–ª—è –∫—Ä–∏–∑–∏—Å–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π"""
        return """
üö® –Ø –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—ã –ø–µ—Ä–µ–∂–∏–≤–∞–µ—Ç–µ —Ç—è–∂–µ–ª—ã–µ —á—É–≤—Å—Ç–≤–∞. 

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –ø–æ–º–æ—â—å—é:
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–≤–µ—Ä–∏—è: 8-800-2000-122 (–∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ)
‚Ä¢ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å: 112
‚Ä¢ –ö—Ä–∏–∑–∏—Å–Ω–∞—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å: 8-495-989-50-50

–ù–µ –æ—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –æ–¥–∏–Ω –Ω–∞ –æ–¥–∏–Ω —Å –ø—Ä–æ–±–ª–µ–º–æ–π. –í–∞—à–∞ –∂–∏–∑–Ω—å –±–µ—Å—Ü–µ–Ω–Ω–∞.
"""

    def error_handler(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"Exception while handling an update: {context.error}")
        
        # Try to send error message if possible
        try:
            if update and update.message:
                update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except:
            pass

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not TELEGRAM_TOKEN:
        logger.error("Missing TELEGRAM_TOKEN environment variable")
        return
    if not OPENAI_API_KEY:
        logger.error("Missing OPENAI_API_KEY environment variable")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º updater –≤–º–µ—Å—Ç–æ application (–¥–ª—è v13)
        updater = Updater(TELEGRAM_TOKEN, use_context=True)
        
        # –ü–æ–ª—É—á–∞–µ–º dispatcher –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        dp = updater.dispatcher
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞-–ø—Å–∏—Ö–æ–ª–æ–≥–∞
        bot = PsychologistBot()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        dp.add_handler(CommandHandler("start", bot.start))
        dp.add_handler(MessageHandler(Filters.voice, bot.handle_voice))
        dp.add_handler(MessageHandler(Filters.text & ~Filters.command, bot.handle_text))
        dp.add_error_handler(bot.error_handler)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        port = int(os.environ.get('PORT', 8443))
        webhook_url = os.environ.get('WEBHOOK_URL')
        
        if webhook_url:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º webhook –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
            updater.start_webhook(
                listen="0.0.0.0",
                port=port,
                url_path=TELEGRAM_TOKEN,
                webhook_url=f"{webhook_url}/{TELEGRAM_TOKEN}"
            )
            logger.info("Bot started with webhook")
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º polling –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            updater.start_polling()
            logger.info("Bot started with polling")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –¥–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        updater.idle()
            
    except Exception as e:
        logger.error(f"Failed to start bot: {e}")
        raise

if __name__ == '__main__':
    main()
