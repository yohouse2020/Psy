import os
import logging
import tempfile
import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import speech_recognition as sr
from gtts import gTTS
import openai
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.environ.get('TELEGRAM_TOKEN')
OPENAI_API_KEY = os.environ.get('OPENAI_API_KEY')

class PsychologistBot:
    def __init__(self):
        self.recognizer = sr.Recognizer()
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = """
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–±–∏–Ω–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–º–æ—â–∏!

–Ø - –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥, –≥–æ—Ç–æ–≤—ã–π –≤—ã—Å–ª—É—à–∞—Ç—å –∏ –ø–æ–º–æ—á—å. –í—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –ü–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É

–Ø —Å–æ–±–ª—é–¥–∞—é –ø–æ–ª–Ω—É—é –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ —ç—Ç–∏–∫—É –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏.

–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç...
        """
        await update.message.reply_text(welcome_text)

    async def handle_voice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            await update.message.reply_text("üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
            
            voice = update.message.voice
            voice_file = await voice.get_file()
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            voice_content = await voice_file.download_as_bytearray()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as temp_ogg:
                temp_ogg.write(voice_content)
                temp_ogg_path = temp_ogg.name

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV
            with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as temp_wav:
                temp_wav_path = temp_wav.name

            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É—è pydub
            from pydub import AudioSegment
            audio = AudioSegment.from_ogg(temp_ogg_path)
            audio.export(temp_wav_path, format="wav")
            
            # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
            text = self.speech_to_text(temp_wav_path)
            
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            os.unlink(temp_ogg_path)
            os.unlink(temp_wav_path)

            if text:
                await update.message.reply_text(f"üé§ –Ø —É—Å–ª—ã—à–∞–ª: _{text}_", parse_mode='Markdown')
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞
                psychologist_response = await self.generate_psychologist_response(text)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
                await update.message.reply_text(psychologist_response)
                
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º.")

        except Exception as e:
            logging.error(f"Error processing voice: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º.")

    def speech_to_text(self, audio_path: str) -> str:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –≤ —Ç–µ–∫—Å—Ç"""
        try:
            with sr.AudioFile(audio_path) as source:
                audio = self.recognizer.record(source)
                text = self.recognizer.recognize_google(audio, language='ru-RU')
                return text
        except sr.UnknownValueError:
            return ""
        except sr.RequestError as e:
            logging.error(f"Speech recognition error: {e}")
            return ""

    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_text = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏–∑–∏—Å–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏
        if await self.check_crisis_situation(user_text):
            await update.message.reply_text(self.get_crisis_response())
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞
        response = await self.generate_psychologist_response(user_text)
        await update.message.reply_text(response)

    async def generate_psychologist_response(self, user_message: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –≤ —Å—Ç–∏–ª–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI"""
        try:
            client = openai.OpenAI(api_key=OPENAI_API_KEY)
            
            prompt = f"""
–¢—ã - –¥–∏–ø–ª–æ–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥ —Å 15-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É.

–ü–∞—Ü–∏–µ–Ω—Ç: {user_message}

–¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å:
1. –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –∏ —ç—Ç–∏—á–Ω—ã–º
2. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º –∏ —ç–º–ø–∞—Ç–∏—á–Ω—ã–º
3. –û—Å–Ω–æ–≤–∞–Ω–Ω—ã–º –Ω–∞ –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏
4. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º
5. –í —Ñ–æ—Ä–º–∞—Ç–µ —Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞

–ù–µ –¥–∞–≤–∞–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∏–∞–≥–Ω–æ–∑–æ–≤ –∏ –Ω–µ –∑–∞–º–µ–Ω—è–π –æ—á–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é. –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–º —Å–ª—É—à–∞–Ω–∏–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–µ.

–û—Ç–≤–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞:
            """
            
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "–¢—ã - –æ–ø—ã—Ç–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥, –æ–∫–∞–∑—ã–≤–∞—é—â–∏–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=500,
                temperature=0.7
            )
            
            return response.choices[0].message.content.strip()
            
        except Exception as e:
            logging.error(f"OpenAI error: {e}")
            return "–ë–ª–∞–≥–æ–¥–∞—Ä—é –≤–∞—Å –∑–∞ –¥–æ–≤–µ—Ä–∏–µ. –Ø –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –≤–∞—Å –≤—ã—Å–ª—É—à–∞–ª –∏ —Ö–æ—á—É –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞ –ø–æ–º–æ—â—å—é - —ç—Ç–æ –≤–∞–∂–Ω—ã–π —à–∞–≥. –î–∞–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ –ø–æ–¥—É–º–∞–µ–º, –∫–∞–∫ –º—ã –º–æ–∂–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å —Å —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–µ–π. –ß—Ç–æ –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç?"

    async def check_crisis_situation(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫—Ä–∏–∑–∏—Å–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏"""
        crisis_keywords = ['—Å—É–∏—Ü–∏–¥', '—Å–∞–º–æ—É–±–∏–π—Å—Ç–≤–æ', '—É–º—Ä—É', '–ø–æ–∫–æ–Ω—á–∏—Ç—å', '–∫—Ä–∏–∑–∏—Å', '—Ö–æ—á—É —É–º–µ—Ä–µ—Ç—å']
        text_lower = text.lower()
        return any(keyword in text_lower for keyword in crisis_keywords)

    def get_crisis_response(self) -> str:
        """–û—Ç–≤–µ—Ç –¥–ª—è –∫—Ä–∏–∑–∏—Å–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π"""
        return """
üö® –Ø –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—ã –ø–µ—Ä–µ–∂–∏–≤–∞–µ—Ç–µ —Ç—è–∂–µ–ª—ã–µ —á—É–≤—Å—Ç–≤–∞. 

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –ø–æ–º–æ—â—å—é:
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–≤–µ—Ä–∏—è: 8-800-2000-122 (–∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ)
‚Ä¢ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å: 112
‚Ä¢ –ù–µ –æ—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –æ–¥–∏–Ω –Ω–∞ –æ–¥–∏–Ω —Å –ø—Ä–æ–±–ª–µ–º–æ–π

–í–∞—à–∞ –∂–∏–∑–Ω—å –±–µ—Å—Ü–µ–Ω–Ω–∞, –∏ –µ—Å—Ç—å –ª—é–¥–∏, –∫–æ—Ç–æ—Ä—ã–µ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å.
"""

    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logging.error(f"Update {update} caused error {context.error}")
        try:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except:
            pass

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not TELEGRAM_TOKEN or not OPENAI_API_KEY:
        logging.error("Missing required environment variables: TELEGRAM_TOKEN or OPENAI_API_KEY")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞-–ø—Å–∏—Ö–æ–ª–æ–≥–∞
    bot = PsychologistBot()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(MessageHandler(filters.VOICE, bot.handle_voice))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_text))
    application.add_error_handler(bot.error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    port = int(os.environ.get('PORT', 8443))
    webhook_url = os.environ.get('WEBHOOK_URL')
    
    if webhook_url:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º webhook –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
        application.run_webhook(
            listen="0.0.0.0",
            port=port,
            url_path=TELEGRAM_TOKEN,
            webhook_url=f"{webhook_url}/{TELEGRAM_TOKEN}"
        )
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º polling –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        print("ü§ñ –ë–æ—Ç-–ø—Å–∏—Ö–æ–ª–æ–≥ –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling...")
        application.run_polling()

if __name__ == '__main__':
    main()
