import os
import logging
import tempfile
import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import openai
import requests
import base64

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.environ.get('TELEGRAM_TOKEN')
OPENAI_API_KEY = os.environ.get('OPENAI_API_KEY')
ASSEMBLYAI_API_KEY = os.environ.get('ASSEMBLYAI_API_KEY')  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ

class PsychologistBot:
    def __init__(self):
        pass
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        welcome_text = """
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–±–∏–Ω–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–º–æ—â–∏!

–Ø - –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.

–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç...
        """
        await update.message.reply_text(welcome_text)

    async def handle_voice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            await update.message.reply_text("üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
            
            voice = update.message.voice
            voice_file = await voice.get_file()
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as temp_ogg:
                await voice_file.download_to_drive(temp_ogg.name)
                ogg_path = temp_ogg.name

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ MP3
            mp3_path = await self.convert_ogg_to_mp3(ogg_path)
            
            if mp3_path:
                # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å –∏—Å–ø–æ–ª—å–∑—É—è —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã
                text = await self.speech_to_text_alternative(mp3_path)
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                os.unlink(ogg_path)
                os.unlink(mp3_path)
                
                if text:
                    await update.message.reply_text(f"üé§ –Ø —É—Å–ª—ã—à–∞–ª: _{text}_", parse_mode='Markdown')
                    response = await self.generate_psychologist_response(text)
                    await update.message.reply_text(response)
                else:
                    await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º.")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ.")

        except Exception as e:
            logging.error(f"Voice processing error: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞. –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º.")

    async def convert_ogg_to_mp3(self, ogg_path: str) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è OGG –≤ MP3"""
        try:
            mp3_path = ogg_path.replace('.ogg', '.mp3')
            import subprocess
            result = subprocess.run([
                'ffmpeg', '-i', ogg_path, '-codec:a', 'libmp3lame', 
                '-qscale:a', '2', mp3_path, '-y'
            ], capture_output=True, text=True)
            return mp3_path if result.returncode == 0 else None
        except Exception as e:
            logging.error(f"Conversion error: {e}")
            return None

    async def speech_to_text_alternative(self, audio_path: str) -> str:
        """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏"""
        try:
            # –ú–µ—Ç–æ–¥ 1: –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Whisper —á–µ—Ä–µ–∑ OpenAI
            return await self.speech_to_text_whisper(audio_path)
        except Exception as e:
            logging.error(f"Whisper failed: {e}")
            # –ú–µ—Ç–æ–¥ 2: Fallback –Ω–∞ –ø—Ä–æ—Å—Ç—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            return ""

    async def speech_to_text_whisper(self, audio_path: str) -> str:
        """–ò—Å–ø–æ–ª—å–∑—É–µ–º Whisper API –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"""
        try:
            client = openai.OpenAI(api_key=OPENAI_API_KEY)
            
            with open(audio_path, "rb") as audio_file:
                transcript = client.audio.transcriptions.create(
                    model="whisper-1",
                    file=audio_file,
                    language="ru",
                    response_format="text"
                )
            return transcript
        except Exception as e:
            logging.error(f"Whisper API error: {e}")
            return ""

    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_text = update.message.text
        response = await self.generate_psychologist_response(user_text)
        await update.message.reply_text(response)

    async def generate_psychologist_response(self, user_message: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∞"""
        try:
            client = openai.OpenAI(api_key=OPENAI_API_KEY)
            
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥. –û—Ç–≤–µ—á–∞–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ."},
                    {"role": "user", "content": user_message}
                ],
                max_tokens=500,
                temperature=0.7
            )
            return response.choices[0].message.content.strip()
        except Exception as e:
            logging.error(f"OpenAI error: {e}")
            return "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –Ø –≥–æ—Ç–æ–≤ –≤–∞—Å –≤—ã—Å–ª—É—à–∞—Ç—å."

def main():
    if not TELEGRAM_TOKEN or not OPENAI_API_KEY:
        logging.error("Missing environment variables")
        return
    
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    bot = PsychologistBot()
    
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(MessageHandler(filters.VOICE, bot.handle_voice))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_text))
    
    port = int(os.environ.get('PORT', 10000))
    webhook_url = os.environ.get('WEBHOOK_URL')
    
    if webhook_url:
        application.run_webhook(
            listen="0.0.0.0",
            port=port,
            url_path=TELEGRAM_TOKEN,
            webhook_url=f"{webhook_url}/{TELEGRAM_TOKEN}"
        )
    else:
        application.run_polling()

if __name__ == '__main__':
    main()
